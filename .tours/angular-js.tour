{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Angular JS",
  "steps": [
    {
      "file": "src/app/app.component.html",
      "description": "Paso 1: Los String Interpolation es la forma como Angular nos permite tomar datos de la lógica e implementarlos en los elementos HTML, la sintaxis es {{property}} y son datos que Angular trae directamente del archivo de lógica del componente.",
      "line": 4,
      "title": "String Interpolation"
    },
    {
      "file": "src/app/app.component.html",
      "description": "Paso 2: Los property bindings sirven para poner lógica de programación en las propiedades de los elementos HTML.",
      "line": 2,
      "title": "Property Bindings"
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 7,
          "character": 73
        }
      },
      "description": "Paso 3: Angular nos permite escuchar los eventos que ocurren en los elementos HTML con ésta sintaxis.",
      "title": "Angular Events"
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 7
        }
      },
      "description": "Paso 4: Algunos métodos para manejar los elementos HTML según los eventos que ocurran.",
      "title": "Managment of elements with events"
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 37,
          "character": 1
        },
        "end": {
          "line": 51,
          "character": 35
        }
      },
      "description": "Paso 5: NgModel",
      "title": "Ng Model"
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 55,
          "character": 1
        },
        "end": {
          "line": 69,
          "character": 15
        }
      },
      "description": "Paso 6: *NgIf",
      "title": "NgIf"
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 73,
          "character": 1
        },
        "end": {
          "line": 82,
          "character": 6
        }
      },
      "description": "Paso 7: *ngFor",
      "title": "NgFor"
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 86,
          "character": 1
        },
        "end": {
          "line": 93,
          "character": 7
        }
      },
      "description": "# NgFor Arrays\n\nPaso 8: *ngFor nos permite iterar elementos de tipo Array y en este ejemplo iteramos un array lleno de objetos con distintos elementos, además se crea un archivo de tipo _interfaz_ para crear un tipo de dato propio para los objetos que van a ser iterados dentro del `array`."
    },
    {
      "file": "src/app/product.model.ts",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 2
        }
      },
      "description": "# NgFor Arrays --> Interface\n\nCreando una interface con los datos que contiene el objeto que se va a iterar."
    },
    {
      "file": "src/app/app.component.ts",
      "selection": {
        "start": {
          "line": 24,
          "character": 1
        },
        "end": {
          "line": 56,
          "character": 5
        }
      },
      "description": "# NgFor Arrays --> Array of Objects\n\nLa data que está en objetos y va a ser mostrada en pantalla."
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 97,
          "character": 1
        },
        "end": {
          "line": 103,
          "character": 7
        }
      },
      "description": "# NgSwitch\n\n**Paso 9:** ngSwitch permite tener una estructura de tipo **Switch** para mostrar el contenido de etiquetas html y/o estilos según los casos del *switch*."
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 107,
          "character": 1
        },
        "end": {
          "line": 129,
          "character": 7
        }
      },
      "description": "# Class & Style\n\nPaso 10: Por medio del ngModel y/o las variables de referencia podemos asignar estilos a nuestros elementos con la sintaxis de las _property bindings_ `[style.width.px]=\"widthImg\"` esto nos permite asignar estilos inline, pero tambien asignar clases según nuestro modelo actual."
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 129,
          "character": 1
        },
        "end": {
          "line": 155,
          "character": 7
        }
      },
      "description": "# NgClass & NgStyle\n\n**Paso 11**: Estas propiedades nos permiten asignar clases o estilos de forma agrupada para tener un mejor manejo de los estilos de nuestro sitio."
    },
    {
      "file": "src/app/app.component.html",
      "selection": {
        "start": {
          "line": 159,
          "character": 1
        },
        "end": {
          "line": 177,
          "character": 8
        }
      },
      "description": "# Form\n\n**Paso 12:** Todas las funcionalidades de los formularios en un ejemplo de registro."
    }
  ],
  "ref": "main"
}